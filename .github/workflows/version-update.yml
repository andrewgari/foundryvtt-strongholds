name: Version Update

on:
  push:
    tags:
      - 'bump-major'
      - 'bump-minor'

jobs:
  version-update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Get current version
        id: current_version
        run: |
          VERSION=$(jq -r '.version' module.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Determine version bump type
        id: bump_type
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          if [[ "$TAG_NAME" == "bump-major" ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif [[ "$TAG_NAME" == "bump-minor" ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          fi

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT="${{ steps.current_version.outputs.version }}"
          BUMP_TYPE="${{ steps.bump_type.outputs.type }}"
          IFS='.' read -r major minor patch <<< "$CURRENT"
          
          if [[ "$BUMP_TYPE" == "major" ]]; then
            NEW_MAJOR=$((major + 1))
            NEW_VERSION="$NEW_MAJOR.0.0"
          elif [[ "$BUMP_TYPE" == "minor" ]]; then
            NEW_MINOR=$((minor + 1))
            NEW_VERSION="$major.$NEW_MINOR.0"
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Bumping $BUMP_TYPE version from $CURRENT to $NEW_VERSION"

      - name: Update module.json version
        run: |
          jq --arg version "${{ steps.new_version.outputs.new_version }}" '.version = $version' module.json > tmp.json && mv tmp.json module.json

      - name: Update package.json version
        run: |
          jq --arg version "${{ steps.new_version.outputs.new_version }}" '.version = $version' package.json > tmp.json && mv tmp.json package.json

      - name: Update README version
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          
          # Update version header in changelog
          sed -i "s/### Version [0-9]\+\.[0-9]\+\.[0-9]\+/### Version $NEW_VERSION/" README.md
          
          # Add new changelog entry
          DATE=$(date +"%Y-%m-%d")
          BUMP_TYPE="${{ steps.bump_type.outputs.type }}"
          
          # Insert new version section after "## Changelog"
          sed -i "/## Changelog/a\\
\\
### Version $NEW_VERSION ($DATE)\\
- $BUMP_TYPE version update\\
- Ready for new features and improvements" README.md

      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add module.json package.json README.md
          git commit -m "chore: bump ${{ steps.bump_type.outputs.type }} version to ${{ steps.new_version.outputs.new_version }}"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main

      - name: Delete trigger tag
        run: |
          git push --delete origin ${{ steps.bump_type.outputs.tag }} || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release tag
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          git tag "v$NEW_VERSION"
          git push origin "v$NEW_VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}