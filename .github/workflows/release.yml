name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Update module.json for release
        run: |
          # Update version in module.json to match tag
          jq --arg version "${{ steps.get_version.outputs.VERSION }}" '.version = $version' module.json > tmp.json && mv tmp.json module.json
          
          # Update URLs for release
          REPO_URL="https://github.com/${{ github.repository }}"
          jq --arg manifest "${REPO_URL}/releases/latest/download/module.json" '.manifest = $manifest' module.json > tmp.json && mv tmp.json module.json
          jq --arg download "${REPO_URL}/releases/download/v${{ steps.get_version.outputs.VERSION }}/strongholds-and-followers-v${{ steps.get_version.outputs.VERSION }}.zip" '.download = $download' module.json > tmp.json && mv tmp.json module.json

      - name: Create release package
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          
          # Create clean release package (exclude development files)
          zip -r "strongholds-and-followers-v${VERSION}.zip" . \
            -x "*.git*" "*.github*" "test-module.html" "*.pdf" "GITHUB_SETUP.md" "VERSIONING.md" "*.md"

      - name: Generate changelog
        id: changelog
        run: |
          # Extract changelog for this version from README
          VERSION_SECTION=$(sed -n "/### Version ${{ steps.get_version.outputs.VERSION }}/,/### Version /p" README.md | sed '$d')
          if [ -z "$VERSION_SECTION" ]; then
            VERSION_SECTION="Release version ${{ steps.get_version.outputs.VERSION }}"
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$VERSION_SECTION" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Determine release type
        id: release_type
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          if [[ "$VERSION" =~ ^[0-9]+\.0\.0$ ]]; then
            echo "is_major=true" >> $GITHUB_OUTPUT
            echo "is_stable=true" >> $GITHUB_OUTPUT
          else
            echo "is_major=false" >> $GITHUB_OUTPUT
            echo "is_stable=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: "Strongholds & Followers v${{ steps.get_version.outputs.VERSION }}${{ steps.release_type.outputs.is_stable == 'true' && ' (Stable)' || '' }}"
          body: |
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ${{ steps.release_type.outputs.is_stable == 'true' && 'ðŸŽ¯ **Stable Release** - Recommended for production use' || 'ðŸš€ **Latest Release** - Auto-generated from main branch' }}
            
            ## Installation
            
            ### Automatic (Recommended)
            1. In FoundryVTT, go to "Add-on Modules" 
            2. Click "Install Module"
            3. Paste this manifest URL: `https://github.com/${{ github.repository }}/releases/latest/download/module.json`
            
            ### Manual
            1. Download the zip file below
            2. Extract to your FoundryVTT `Data/modules/` directory
            3. Enable in your world's module settings
            
            ## Compatibility
            - FoundryVTT: v13+
            - D&D 5e System: v5.0.0+ (Required dependency)
          files: |
            strongholds-and-followers-v${{ steps.get_version.outputs.VERSION }}.zip
            module.json
          draft: false
          prerelease: false
          make_latest: ${{ steps.release_type.outputs.is_stable == 'true' && 'true' || 'false' }}

      - name: Create stable tag for major releases
        if: steps.release_type.outputs.is_stable == 'true'
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          MAJOR_VERSION=$(echo "$VERSION" | cut -d. -f1)
          
          # Create or update stable tag
          git tag -f "stable-v${MAJOR_VERSION}" "v${VERSION}"
          git push origin "stable-v${MAJOR_VERSION}" --force
          
          # Create stable release notes
          cat > stable_notes.md << EOF
          ðŸŽ¯ **Stable Release Channel** - Major version ${MAJOR_VERSION}
          
          This is the stable release channel for major version ${MAJOR_VERSION}.x.x
          
          Currently pointing to: **v${VERSION}**
          
          ## What is a Stable Release?
          - Major version releases (x.0.0) are marked as stable
          - Recommended for production use
          - Receives only critical bug fixes
          - Point releases maintain compatibility within major version
          
          ## Installation
          Use the same manifest URL for automatic updates:
          \`https://github.com/${{ github.repository }}/releases/latest/download/module.json\`
          EOF
          
          # Create stable release
          gh release create "stable-v${MAJOR_VERSION}" \
            --title "Stable v${MAJOR_VERSION} (Latest: v${VERSION})" \
            --notes-file stable_notes.md \
            --target "v${VERSION}" || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}